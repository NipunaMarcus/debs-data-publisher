/*
Hive script for DEBS usacase

 Fields:
 * id – a unique identifier of the measurement [STRING]
 * timestamp – timestamp of measurement (number of seconds since January 1, 1970, 00:00:00 GMT) [BIGINT]
 * value – the measurement [FLOAT]
 * property – type of the measurement: 0 for work or 1 for load [INT]
 * plug_id – a unique identifier (within a household) of the smart plug [STRING]
 * household_id – a unique identifier of a household (within a house) where the plug is located [STRING]
 * house_id – a unique identifier of a house where the household with the plug is located [STRING] 
*/

CREATE EXTERNAL TABLE IF NOT EXISTS DEBSCassandraTable (key STRING, id STRING, time_stamp BIGINT, value FLOAT, property INT,
	plug_id STRING, household_id STRING, house_id STRING, publisher STRING) STORED BY 
'org.apache.hadoop.hive.cassandra.CassandraStorageHandler' WITH SERDEPROPERTIES (
"wso2.carbon.datasource.name" = "WSO2BAM_CASSANDRA_EVENT_SOURCE",
"cassandra.cf.name" = "debs_data",
"cassandra.columns.mapping" = ":key,payload_id,payload_timestamp,payload_value,payload_property,payload_plug_id,payload_household_id,payload_house_id,meta_publisher" );                               

/* ==============  Query 1 - Houses/households using more than 28 units  ========================================================================================================= */

CREATE EXTERNAL TABLE IF NOT EXISTS DEBSTable1(id STRING, house_id STRING, household_id STRING, value FLOAT, time_stamp STRING ) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'id',
'hive.jdbc.table.create.query' = 'CREATE TABLE DEBS_Table_1 ( id VARCHAR(50), house_id VARCHAR(50), household_id VARCHAR(50), value FLOAT, time_stamp VARCHAR(50))' );

INSERT OVERWRITE TABLE DEBSTable1 SELECT id, house_id, household_id, value, from_unixtime(time_stamp, 'yyyy-MM-dd HH:mm:ss') AS time_stamp FROM DEBSCassandraTable WHERE property = 1 AND value > 28 GROUP BY id, house_id, household_id, value, from_unixtime(time_stamp, 'yyyy-MM-dd HH:mm:ss');

/* ================  Query 2 - Households with more than 3 plugs  ================================================================================================================= */

CREATE EXTERNAL TABLE IF NOT EXISTS DEBSTable2(house_id STRING, household_id STRING, plugs INT) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'house_id,household_id',
'hive.jdbc.table.create.query' = 'CREATE TABLE DEBS_Table_2 ( house_id VARCHAR(50), household_id VARCHAR(50), plugs INT)' );

INSERT OVERWRITE TABLE DEBSTable2 SELECT house_id, household_id, count(DISTINCT plug_id) AS plugs FROM DEBSCassandraTable GROUP BY house_id, household_id HAVING count(DISTINCT plug_id) > 3;

/* ================  Query 3 - Times when maximum usage was reached for each household (regardless of plug) ======================================================================== */

CREATE EXTERNAL TABLE IF NOT EXISTS DEBSTable3(house_id STRING, household_id STRING, max_usage FLOAT, time_stamp STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'house_id,household_id',
'hive.jdbc.table.create.query' = 'CREATE TABLE DEBS_Table_3 ( house_id VARCHAR(50), household_id VARCHAR(50), max_usage FLOAT, time_stamp VARCHAR(50))' );

INSERT OVERWRITE TABLE DEBSTable3 SELECT a.house_id, a.household_id, b.max_usage, from_unixtime(a.time_stamp, 'yyyy-MM-dd HH:mm:ss') AS time_stamp FROM DEBSCassandraTable a INNER JOIN (SELECT house_id, household_id, max(value) AS max_usage FROM DEBSCassandraTable WHERE property = 1 GROUP BY house_id, household_id) b ON a.house_id = b.house_id AND a.household_id = b.household_id AND a.value = b.max_usage GROUP BY a.house_id, a.household_id, from_unixtime(a.time_stamp, 'yyyy-MM-dd HH:mm:ss'), b.max_usage;

/* ================  Query 4 - The plug that recorded the least usage per household among all houses ======================================================================== */

CREATE EXTERNAL TABLE IF NOT EXISTS DEBSTable4(house_id STRING, household_id STRING, plug_id STRING, min_usage FLOAT) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'house_id,household_id,plug_id',
'hive.jdbc.table.create.query' = 'CREATE TABLE DEBS_Table_4 ( house_id VARCHAR(50), household_id VARCHAR(50), plug_id VARCHAR(50), min_usage FLOAT)' );

INSERT OVERWRITE TABLE DEBSTable4 SELECT a.house_id, a.household_id, a.plug_id, b.min_usage FROM DEBSCassandraTable a INNER JOIN (SELECT house_id, household_id, min(value) AS min_usage FROM DEBSCassandraTable WHERE property = 1 GROUP BY house_id, household_id) b ON a.house_id = b.house_id AND a.household_id = b.household_id AND a.value = b.min_usage GROUP BY a.house_id, a.household_id, a.plug_id, b.min_usage;

/* ================  Query 5 - Average work, load values per house ========================================================================================================== */

CREATE EXTERNAL TABLE IF NOT EXISTS DEBSTable5(house_id STRING, avg_load STRING, avg_work STRING) 
STORED BY 'org.wso2.carbon.hadoop.hive.jdbc.storage.JDBCStorageHandler' TBLPROPERTIES ( 
'wso2.carbon.datasource.name'='WSO2BAM_DATASOURCE',
'hive.jdbc.update.on.duplicate' = 'true',
'hive.jdbc.primary.key.fields' = 'house_id',
'hive.jdbc.table.create.query' = 'CREATE TABLE DEBS_Table_5 ( house_id VARCHAR(50), avg_load VARCHAR(50), avg_work VARCHAR(50))' );

INSERT OVERWRITE TABLE DEBSTable5 SELECT a.house_id, c.avg_load, b.avg_work FROM DEBSCassandraTable a JOIN (SELECT house_id, avg(value) AS avg_work FROM DEBSCassandraTable WHERE property = 0 GROUP BY house_id) b ON (a.house_id = b.house_id) JOIN (SELECT house_id, avg(value) AS avg_load FROM DEBSCassandraTable WHERE property = 1 GROUP BY house_id) c ON (a.house_id = c.house_id) GROUP BY a.house_id, c.avg_load, b.avg_work;

